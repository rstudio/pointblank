% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/col_anomaly_check.R
\name{col_anomaly_check}
\alias{col_anomaly_check}
\title{Do columns in the table contain anomalous values?}
\usage{
col_anomaly_check(
  x,
  x_column,
  y_column,
  preconditions = NULL,
  actions = NULL,
  step_id = NULL,
  label = NULL,
  brief = NULL,
  active = TRUE
)
}
\arguments{
\item{x}{A data frame, tibble (\code{tbl_df} or \code{tbl_dbi}), Spark DataFrame
(\code{tbl_spark}), or, an agent object of class \code{ptblank_agent} that is created
with \code{\link[=create_agent]{create_agent()}}.}

\item{x_column}{The column that contains the \emph{x} values. This should be a
date-time column because, currently, the \code{col_anomaly_check()} function
only supports anomaly detection as part of a time-series analysis.}

\item{y_column}{The column that contains the \emph{y} values, which must be
numeric.}

\item{preconditions}{An optional expression for mutating the input table
before proceeding with the validation. This is ideally as a one-sided R
formula using a leading \code{~}. In the formula representation, the \code{.} serves
as the input data table to be transformed (e.g.,
\code{~ . \%>\% dplyr::mutate(col = col + 10)}.}

\item{actions}{A list containing threshold levels so that the validation step
can react accordingly when exceeding the set levels. This is to be created
with the \code{\link[=action_levels]{action_levels()}} helper function.}

\item{step_id}{One or more optional identifiers for the single or multiple
validation steps generated from calling a validation function. The use of
step IDs serves to distinguish validation steps from each other and provide
an opportunity for supplying a more meaningful label compared to the step
index. By default this is \code{NULL}, and \strong{pointblank} will automatically
generate the step ID value (based on the step index) in this case. One or
more values can be provided, and the exact number of ID values should (1)
match the number of validation steps that the validation function call will
produce (influenced by the number of \code{columns} provided), (2) be an ID
string not used in any previous validation step, and (3) be a vector with
unique values.}

\item{label}{An optional label for the validation step. This label appears in
the agent report and for the best appearance it should be kept short.}

\item{brief}{An optional, text-based description for the validation step. If
nothing is provided here then an \emph{autobrief} is generated by the agent,
using the language provided in \code{\link[=create_agent]{create_agent()}}'s \code{lang} argument (which
defaults to \code{"en"} or English). The \emph{autobrief} incorporates details of the
validation step so it's often the preferred option in most cases (where a
\code{label} might be better suited to succinctly describe the validation).}

\item{active}{A logical value indicating whether the validation step should
be active. If the step function is working with an agent, \code{FALSE} will make
the validation step inactive (still reporting its presence and keeping
indexes for the steps unchanged). If the step function will be operating
directly on data, then any step with \code{active = FALSE} will simply pass the
data through with no validation whatsoever. The default for this is \code{TRUE}.}
}
\description{
The \code{col_anomaly_check()} validation function, the
\code{expect_col_anomaly_check()} expectation function, and the
\code{test_col_anomaly_check()} test function all check whether column values
contain anomalous values in a time series. Because this family of functions
only currently supports a time-series analysis for the detection of
anomalies, the \code{x_column} must contain date-time values and the \code{y_column}
must contain numeric values. The validation function can be used directly on
a data table or with an \emph{agent} object (technically, a \code{ptblank_agent}
object) whereas the expectation and test functions can only be used with a
data table. The types of data tables that can be used include data frames,
tibbles, database tables (\code{tbl_dbi}), and Spark DataFrames (\code{tbl_spark}).
Each validation step or expectation will operate over the number of test
units that is equal to the number of rows in the table (after any
\code{preconditions} have been applied).
}
\seealso{
Other validation functions: 
\code{\link{col_exists}()},
\code{\link{col_is_character}()},
\code{\link{col_is_date}()},
\code{\link{col_is_factor}()},
\code{\link{col_is_integer}()},
\code{\link{col_is_logical}()},
\code{\link{col_is_numeric}()},
\code{\link{col_is_posix}()},
\code{\link{col_schema_match}()},
\code{\link{col_vals_between}()},
\code{\link{col_vals_decreasing}()},
\code{\link{col_vals_equal}()},
\code{\link{col_vals_expr}()},
\code{\link{col_vals_gte}()},
\code{\link{col_vals_gt}()},
\code{\link{col_vals_in_set}()},
\code{\link{col_vals_increasing}()},
\code{\link{col_vals_lte}()},
\code{\link{col_vals_lt}()},
\code{\link{col_vals_not_between}()},
\code{\link{col_vals_not_equal}()},
\code{\link{col_vals_not_in_set}()},
\code{\link{col_vals_not_null}()},
\code{\link{col_vals_null}()},
\code{\link{col_vals_regex}()},
\code{\link{conjointly}()},
\code{\link{rows_distinct}()}
}
\concept{validation functions}
